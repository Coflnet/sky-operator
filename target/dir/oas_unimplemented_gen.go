// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"time"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// ApplyPost implements POST /Apply operation.
//
// Brings all products, groups and roles into the given state
// will disable/delete anything not present so use carefully.
//
// POST /Apply
func (UnimplementedHandler) ApplyPost(ctx context.Context, req *SystemState) error {
	return ht.ErrNotImplemented
}

// CallbackPaypalPost implements POST /Callback/paypal operation.
//
// Accept callbacks from paypal.
//
// POST /Callback/paypal
func (UnimplementedHandler) CallbackPaypalPost(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// CallbackStripePost implements POST /Callback/stripe operation.
//
// Webhook callback for stripe.
//
// POST /Callback/stripe
func (UnimplementedHandler) CallbackStripePost(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// GroupGet implements GET /Group operation.
//
// GET /Group
func (UnimplementedHandler) GroupGet(ctx context.Context, params GroupGetParams) (r []Group, _ error) {
	return r, ht.ErrNotImplemented
}

// GroupGroupSlugDelete implements DELETE /Group/{groupSlug} operation.
//
// DELETE /Group/{groupSlug}
func (UnimplementedHandler) GroupGroupSlugDelete(ctx context.Context, params GroupGroupSlugDeleteParams) (r *Group, _ error) {
	return r, ht.ErrNotImplemented
}

// GroupGroupSlugGet implements GET /Group/{groupSlug} operation.
//
// GET /Group/{groupSlug}
func (UnimplementedHandler) GroupGroupSlugGet(ctx context.Context, params GroupGroupSlugGetParams) (r *Group, _ error) {
	return r, ht.ErrNotImplemented
}

// GroupGroupSlugProductsDelete implements DELETE /Group/{groupSlug}/products operation.
//
// DELETE /Group/{groupSlug}/products
func (UnimplementedHandler) GroupGroupSlugProductsDelete(ctx context.Context, req []string, params GroupGroupSlugProductsDeleteParams) (r *Group, _ error) {
	return r, ht.ErrNotImplemented
}

// GroupGroupSlugProductsPost implements POST /Group/{groupSlug}/products operation.
//
// POST /Group/{groupSlug}/products
func (UnimplementedHandler) GroupGroupSlugProductsPost(ctx context.Context, req []string, params GroupGroupSlugProductsPostParams) (r *Group, _ error) {
	return r, ht.ErrNotImplemented
}

// GroupGroupSlugPut implements PUT /Group/{groupSlug} operation.
//
// PUT /Group/{groupSlug}
func (UnimplementedHandler) GroupGroupSlugPut(ctx context.Context, req *Group, params GroupGroupSlugPutParams) (r *Group, _ error) {
	return r, ht.ErrNotImplemented
}

// GroupPost implements POST /Group operation.
//
// POST /Group
func (UnimplementedHandler) GroupPost(ctx context.Context, req *Group) (r *Group, _ error) {
	return r, ht.ErrNotImplemented
}

// ProductsGet implements GET /Products operation.
//
// Get all products.
//
// GET /Products
func (UnimplementedHandler) ProductsGet(ctx context.Context, params ProductsGetParams) (r []PurchaseableProduct, _ error) {
	return r, ht.ErrNotImplemented
}

// ProductsPProductSlugGet implements GET /Products/p/{productSlug} operation.
//
// Get the details of a product.
//
// GET /Products/p/{productSlug}
func (UnimplementedHandler) ProductsPProductSlugGet(ctx context.Context, params ProductsPProductSlugGetParams) (r *PurchaseableProduct, _ error) {
	return r, ht.ErrNotImplemented
}

// ProductsPut implements PUT /Products operation.
//
// Updates a product by replacing it with a new one.
// Old products can not be deleted to furfill accounting needs.
//
// PUT /Products
func (UnimplementedHandler) ProductsPut(ctx context.Context, req *PurchaseableProduct) (r *PurchaseableProduct, _ error) {
	return r, ht.ErrNotImplemented
}

// ProductsServiceServiceSlugCountGet implements GET /Products/service/{serviceSlug}/count operation.
//
// Count of users owning a service.
//
// GET /Products/service/{serviceSlug}/count
func (UnimplementedHandler) ProductsServiceServiceSlugCountGet(ctx context.Context, params ProductsServiceServiceSlugCountGetParams) (r int32, _ error) {
	return r, ht.ErrNotImplemented
}

// ProductsServiceServiceSlugIdsGet implements GET /Products/service/{serviceSlug}/ids operation.
//
// Gets all userIds owning a service.
//
// GET /Products/service/{serviceSlug}/ids
func (UnimplementedHandler) ProductsServiceServiceSlugIdsGet(ctx context.Context, params ProductsServiceServiceSlugIdsGetParams) (r []string, _ error) {
	return r, ht.ErrNotImplemented
}

// ProductsServicesGet implements GET /Products/services operation.
//
// Get services.
//
// GET /Products/services
func (UnimplementedHandler) ProductsServicesGet(ctx context.Context, params ProductsServicesGetParams) (r []PurchaseableProduct, _ error) {
	return r, ht.ErrNotImplemented
}

// ProductsTopupGet implements GET /Products/topup operation.
//
// Get topup options.
//
// GET /Products/topup
func (UnimplementedHandler) ProductsTopupGet(ctx context.Context, params ProductsTopupGetParams) (r []TopUpProduct, _ error) {
	return r, ht.ErrNotImplemented
}

// ProductsTopupPut implements PUT /Products/topup operation.
//
// Updates a topup option by replacing it with a new one.
// Old options get a new slug and are marked as disabled.
//
// PUT /Products/topup
func (UnimplementedHandler) ProductsTopupPut(ctx context.Context, req *TopUpProduct) (r *TopUpProduct, _ error) {
	return r, ht.ErrNotImplemented
}

// ProductsUserUserIdGet implements GET /Products/user/{userId} operation.
//
// Get adjusted prices for a user.
//
// GET /Products/user/{userId}
func (UnimplementedHandler) ProductsUserUserIdGet(ctx context.Context, params ProductsUserUserIdGetParams) (r []RuleResult, _ error) {
	return r, ht.ErrNotImplemented
}

// RulesGet implements GET /Rules operation.
//
// Returns all rules.
//
// GET /Rules
func (UnimplementedHandler) RulesGet(ctx context.Context, params RulesGetParams) (r []Rule, _ error) {
	return r, ht.ErrNotImplemented
}

// RulesPost implements POST /Rules operation.
//
// Creates a new rule.
//
// POST /Rules
func (UnimplementedHandler) RulesPost(ctx context.Context, req *RuleCreate) (r *Rule, _ error) {
	return r, ht.ErrNotImplemented
}

// RulesRuleSlugDelete implements DELETE /Rules/{ruleSlug} operation.
//
// Deletes a rule.
//
// DELETE /Rules/{ruleSlug}
func (UnimplementedHandler) RulesRuleSlugDelete(ctx context.Context, params RulesRuleSlugDeleteParams) (r *Rule, _ error) {
	return r, ht.ErrNotImplemented
}

// RulesRuleSlugGet implements GET /Rules/{ruleSlug} operation.
//
// Returns a rule by slug.
//
// GET /Rules/{ruleSlug}
func (UnimplementedHandler) RulesRuleSlugGet(ctx context.Context, params RulesRuleSlugGetParams) (r *Rule, _ error) {
	return r, ht.ErrNotImplemented
}

// TopUpCompensatePost implements POST /TopUp/compensate operation.
//
// Compensates users of a service for something.
//
// POST /TopUp/compensate
func (UnimplementedHandler) TopUpCompensatePost(ctx context.Context, req *Compensation) (r *Int32Int32ValueTuple, _ error) {
	return r, ht.ErrNotImplemented
}

// TopUpCustomPost implements POST /TopUp/custom operation.
//
// Creates a custom topup that is instantly credited.
//
// POST /TopUp/custom
func (UnimplementedHandler) TopUpCustomPost(ctx context.Context, req *CustomTopUp, params TopUpCustomPostParams) (r *TopUpIdResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// TopUpOptionsGet implements GET /TopUp/options operation.
//
// All available topup options.
//
// GET /TopUp/options
func (UnimplementedHandler) TopUpOptionsGet(ctx context.Context) (r []TopUpProduct, _ error) {
	return r, ht.ErrNotImplemented
}

// TopUpPaypalPost implements POST /TopUp/paypal operation.
//
// Creates a payment session with paypal.
//
// POST /TopUp/paypal
func (UnimplementedHandler) TopUpPaypalPost(ctx context.Context, req *TopUpOptions, params TopUpPaypalPostParams) (r *TopUpIdResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// TopUpStripePost implements POST /TopUp/stripe operation.
//
// Creates a payment session with stripe.
//
// POST /TopUp/stripe
func (UnimplementedHandler) TopUpStripePost(ctx context.Context, req *TopUpOptions, params TopUpStripePostParams) (r *TopUpIdResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// TransactionPlanedUUserIdGet implements GET /Transaction/planed/u/{userId} operation.
//
// GET /Transaction/planed/u/{userId}
func (UnimplementedHandler) TransactionPlanedUUserIdGet(ctx context.Context, params TransactionPlanedUUserIdGetParams) (r []ExternalTransaction, _ error) {
	return r, ht.ErrNotImplemented
}

// TransactionPlanedUUserIdPost implements POST /Transaction/planed/u/{userId} operation.
//
// POST /Transaction/planed/u/{userId}
func (UnimplementedHandler) TransactionPlanedUUserIdPost(ctx context.Context, req *ExternalTransaction, params TransactionPlanedUUserIdPostParams) (r *PlanedTransaction, _ error) {
	return r, ht.ErrNotImplemented
}

// TransactionPlanedUUserIdTTransactionIdDelete implements DELETE /Transaction/planed/u/{userId}/t/{transactionId} operation.
//
// DELETE /Transaction/planed/u/{userId}/t/{transactionId}
func (UnimplementedHandler) TransactionPlanedUUserIdTTransactionIdDelete(ctx context.Context, params TransactionPlanedUUserIdTTransactionIdDeleteParams) (r *PlanedTransaction, _ error) {
	return r, ht.ErrNotImplemented
}

// TransactionPlanedUUserIdTTransactionIdPut implements PUT /Transaction/planed/u/{userId}/t/{transactionId} operation.
//
// PUT /Transaction/planed/u/{userId}/t/{transactionId}
func (UnimplementedHandler) TransactionPlanedUUserIdTTransactionIdPut(ctx context.Context, req *ExternalTransaction, params TransactionPlanedUUserIdTTransactionIdPutParams) (r *PlanedTransaction, _ error) {
	return r, ht.ErrNotImplemented
}

// TransactionSendPost implements POST /Transaction/send operation.
//
// POST /Transaction/send
func (UnimplementedHandler) TransactionSendPost(ctx context.Context, req *TransactionEvent) error {
	return ht.ErrNotImplemented
}

// TransactionUUserIdGet implements GET /Transaction/u/{userId} operation.
//
// GET /Transaction/u/{userId}
func (UnimplementedHandler) TransactionUUserIdGet(ctx context.Context, params TransactionUUserIdGetParams) (r []ExternalTransaction, _ error) {
	return r, ht.ErrNotImplemented
}

// UserUserIdGet implements GET /User/{userId} operation.
//
// Gets the user with the given id.
//
// GET /User/{userId}
func (UnimplementedHandler) UserUserIdGet(ctx context.Context, params UserUserIdGetParams) (r *User, _ error) {
	return r, ht.ErrNotImplemented
}

// UserUserIdOwnsLongestPost implements POST /User/{userId}/owns/longest operation.
//
// Returns the bigest time out of a list of product ids.
//
// POST /User/{userId}/owns/longest
func (UnimplementedHandler) UserUserIdOwnsLongestPost(ctx context.Context, req []string, params UserUserIdOwnsLongestPostParams) (r time.Time, _ error) {
	return r, ht.ErrNotImplemented
}

// UserUserIdOwnsPost implements POST /User/{userId}/owns operation.
//
// Returns all ownership data for an user out of a list of interested.
//
// Deprecated: schema marks this operation as deprecated.
//
// POST /User/{userId}/owns
func (UnimplementedHandler) UserUserIdOwnsPost(ctx context.Context, req []string, params UserUserIdOwnsPostParams) (r []OwnerShip, _ error) {
	return r, ht.ErrNotImplemented
}

// UserUserIdOwnsProductSlugUntilGet implements GET /User/{userId}/owns/{productSlug}/until operation.
//
// Returns the time for how long a user owns a given product.
//
// GET /User/{userId}/owns/{productSlug}/until
func (UnimplementedHandler) UserUserIdOwnsProductSlugUntilGet(ctx context.Context, params UserUserIdOwnsProductSlugUntilGetParams) (r time.Time, _ error) {
	return r, ht.ErrNotImplemented
}

// UserUserIdOwnsUntilPost implements POST /User/{userId}/owns/until operation.
//
// Returns all ownership data for an user out of a list of interested.
//
// POST /User/{userId}/owns/until
func (UnimplementedHandler) UserUserIdOwnsUntilPost(ctx context.Context, req []string, params UserUserIdOwnsUntilPostParams) (r UserUserIdOwnsUntilPostOKApplicationJSON, _ error) {
	return r, ht.ErrNotImplemented
}

// UserUserIdPost implements POST /User/{userId} operation.
//
// Creates a new user with the given id.
//
// POST /User/{userId}
func (UnimplementedHandler) UserUserIdPost(ctx context.Context, params UserUserIdPostParams) (r *User, _ error) {
	return r, ht.ErrNotImplemented
}

// UserUserIdPurchaseProductSlugPost implements POST /User/{userId}/purchase/{productSlug} operation.
//
// Purchase a new product if enough funds are available.
//
// POST /User/{userId}/purchase/{productSlug}
func (UnimplementedHandler) UserUserIdPurchaseProductSlugPost(ctx context.Context, params UserUserIdPurchaseProductSlugPostParams) (r *User, _ error) {
	return r, ht.ErrNotImplemented
}

// UserUserIdServicePurchaseProductSlugPost implements POST /User/{userId}/service/purchase/{productSlug} operation.
//
// Purchase/extends a service if enough funds are available.
//
// POST /User/{userId}/service/purchase/{productSlug}
func (UnimplementedHandler) UserUserIdServicePurchaseProductSlugPost(ctx context.Context, params UserUserIdServicePurchaseProductSlugPostParams) (r *User, _ error) {
	return r, ht.ErrNotImplemented
}

// UserUserIdTransactionIdDelete implements DELETE /User/{userId}/{transactionId} operation.
//
// Undo the purchase of a service.
//
// DELETE /User/{userId}/{transactionId}
func (UnimplementedHandler) UserUserIdTransactionIdDelete(ctx context.Context, params UserUserIdTransactionIdDeleteParams) (r *User, _ error) {
	return r, ht.ErrNotImplemented
}

// UserUserIdTransferPost implements POST /User/{userId}/transfer operation.
//
// Transfers coins to another user.
//
// POST /User/{userId}/transfer
func (UnimplementedHandler) UserUserIdTransferPost(ctx context.Context, req *TransferRequest, params UserUserIdTransferPostParams) (r *TransactionEvent, _ error) {
	return r, ht.ErrNotImplemented
}
