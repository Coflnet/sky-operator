// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'A': // Prefix: "Apply"
				if l := len("Apply"); len(elem) >= l && elem[0:l] == "Apply" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleApplyPostRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
			case 'C': // Prefix: "Callback/"
				if l := len("Callback/"); len(elem) >= l && elem[0:l] == "Callback/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "paypal"
					if l := len("paypal"); len(elem) >= l && elem[0:l] == "paypal" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleCallbackPaypalPostRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				case 's': // Prefix: "stripe"
					if l := len("stripe"); len(elem) >= l && elem[0:l] == "stripe" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleCallbackStripePostRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				}
			case 'G': // Prefix: "Group"
				if l := len("Group"); len(elem) >= l && elem[0:l] == "Group" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGroupGetRequest([0]string{}, w, r)
					case "POST":
						s.handleGroupPostRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "groupSlug"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleGroupGroupSlugDeleteRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleGroupGroupSlugGetRequest([1]string{
								args[0],
							}, w, r)
						case "PUT":
							s.handleGroupGroupSlugPutRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/products"
						if l := len("/products"); len(elem) >= l && elem[0:l] == "/products" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleGroupGroupSlugProductsDeleteRequest([1]string{
									args[0],
								}, w, r)
							case "POST":
								s.handleGroupGroupSlugProductsPostRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,POST")
							}

							return
						}
					}
				}
			case 'P': // Prefix: "Products"
				if l := len("Products"); len(elem) >= l && elem[0:l] == "Products" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleProductsGetRequest([0]string{}, w, r)
					case "PUT":
						s.handleProductsPutRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,PUT")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "p/"
						if l := len("p/"); len(elem) >= l && elem[0:l] == "p/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "productSlug"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleProductsPProductSlugGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 's': // Prefix: "service"
						if l := len("service"); len(elem) >= l && elem[0:l] == "service" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "serviceSlug"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "count"
									if l := len("count"); len(elem) >= l && elem[0:l] == "count" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleProductsServiceServiceSlugCountGetRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'i': // Prefix: "ids"
									if l := len("ids"); len(elem) >= l && elem[0:l] == "ids" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleProductsServiceServiceSlugIdsGetRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleProductsServicesGetRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					case 't': // Prefix: "topup"
						if l := len("topup"); len(elem) >= l && elem[0:l] == "topup" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleProductsTopupGetRequest([0]string{}, w, r)
							case "PUT":
								s.handleProductsTopupPutRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET,PUT")
							}

							return
						}
					case 'u': // Prefix: "user/"
						if l := len("user/"); len(elem) >= l && elem[0:l] == "user/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "userId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleProductsUserUserIdGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'R': // Prefix: "Rules"
				if l := len("Rules"); len(elem) >= l && elem[0:l] == "Rules" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleRulesGetRequest([0]string{}, w, r)
					case "POST":
						s.handleRulesPostRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "ruleSlug"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleRulesRuleSlugDeleteRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleRulesRuleSlugGetRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET")
						}

						return
					}
				}
			case 'T': // Prefix: "T"
				if l := len("T"); len(elem) >= l && elem[0:l] == "T" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'o': // Prefix: "opUp/"
					if l := len("opUp/"); len(elem) >= l && elem[0:l] == "opUp/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "c"
						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "ompensate"
							if l := len("ompensate"); len(elem) >= l && elem[0:l] == "ompensate" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleTopUpCompensatePostRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 'u': // Prefix: "ustom"
							if l := len("ustom"); len(elem) >= l && elem[0:l] == "ustom" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleTopUpCustomPostRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'o': // Prefix: "options"
						if l := len("options"); len(elem) >= l && elem[0:l] == "options" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleTopUpOptionsGetRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 'p': // Prefix: "paypal"
						if l := len("paypal"); len(elem) >= l && elem[0:l] == "paypal" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTopUpPaypalPostRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 's': // Prefix: "stripe"
						if l := len("stripe"); len(elem) >= l && elem[0:l] == "stripe" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTopUpStripePostRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 'r': // Prefix: "ransaction/"
					if l := len("ransaction/"); len(elem) >= l && elem[0:l] == "ransaction/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "planed/u/"
						if l := len("planed/u/"); len(elem) >= l && elem[0:l] == "planed/u/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "userId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleTransactionPlanedUUserIdGetRequest([1]string{
									args[0],
								}, w, r)
							case "POST":
								s.handleTransactionPlanedUUserIdPostRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/t/"
							if l := len("/t/"); len(elem) >= l && elem[0:l] == "/t/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "transactionId"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleTransactionPlanedUUserIdTTransactionIdDeleteRequest([2]string{
										args[0],
										args[1],
									}, w, r)
								case "PUT":
									s.handleTransactionPlanedUUserIdTTransactionIdPutRequest([2]string{
										args[0],
										args[1],
									}, w, r)
								default:
									s.notAllowed(w, r, "DELETE,PUT")
								}

								return
							}
						}
					case 's': // Prefix: "send"
						if l := len("send"); len(elem) >= l && elem[0:l] == "send" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTransactionSendPostRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'u': // Prefix: "u/"
						if l := len("u/"); len(elem) >= l && elem[0:l] == "u/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "userId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleTransactionUUserIdGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'U': // Prefix: "User/"
				if l := len("User/"); len(elem) >= l && elem[0:l] == "User/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "userId"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleUserUserIdGetRequest([1]string{
							args[0],
						}, w, r)
					case "POST":
						s.handleUserUserIdPostRequest([1]string{
							args[0],
						}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'o': // Prefix: "owns"
						if l := len("owns"); len(elem) >= l && elem[0:l] == "owns" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleUserUserIdOwnsPostRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "longest"
								if l := len("longest"); len(elem) >= l && elem[0:l] == "longest" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleUserUserIdOwnsLongestPostRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							case 'u': // Prefix: "until"
								if l := len("until"); len(elem) >= l && elem[0:l] == "until" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleUserUserIdOwnsUntilPostRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							}
							// Param: "productSlug"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/until"
								if l := len("/until"); len(elem) >= l && elem[0:l] == "/until" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleUserUserIdOwnsProductSlugUntilGetRequest([2]string{
											args[0],
											args[1],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					case 'p': // Prefix: "purchase/"
						if l := len("purchase/"); len(elem) >= l && elem[0:l] == "purchase/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "productSlug"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleUserUserIdPurchaseProductSlugPostRequest([2]string{
									args[0],
									args[1],
								}, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 's': // Prefix: "service/purchase/"
						if l := len("service/purchase/"); len(elem) >= l && elem[0:l] == "service/purchase/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "productSlug"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleUserUserIdServicePurchaseProductSlugPostRequest([2]string{
									args[0],
									args[1],
								}, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 't': // Prefix: "transfer"
						if l := len("transfer"); len(elem) >= l && elem[0:l] == "transfer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleUserUserIdTransferPostRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
					// Param: "transactionId"
					// Leaf parameter
					args[1] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleUserUserIdTransactionIdDeleteRequest([2]string{
								args[0],
								args[1],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE")
						}

						return
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'A': // Prefix: "Apply"
				if l := len("Apply"); len(elem) >= l && elem[0:l] == "Apply" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: ApplyPost
						r.name = "ApplyPost"
						r.operationID = ""
						r.pathPattern = "/Apply"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'C': // Prefix: "Callback/"
				if l := len("Callback/"); len(elem) >= l && elem[0:l] == "Callback/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "paypal"
					if l := len("paypal"); len(elem) >= l && elem[0:l] == "paypal" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: CallbackPaypalPost
							r.name = "CallbackPaypalPost"
							r.operationID = ""
							r.pathPattern = "/Callback/paypal"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 's': // Prefix: "stripe"
					if l := len("stripe"); len(elem) >= l && elem[0:l] == "stripe" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: CallbackStripePost
							r.name = "CallbackStripePost"
							r.operationID = ""
							r.pathPattern = "/Callback/stripe"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'G': // Prefix: "Group"
				if l := len("Group"); len(elem) >= l && elem[0:l] == "Group" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GroupGet"
						r.operationID = ""
						r.pathPattern = "/Group"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "GroupPost"
						r.operationID = ""
						r.pathPattern = "/Group"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "groupSlug"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "GroupGroupSlugDelete"
							r.operationID = ""
							r.pathPattern = "/Group/{groupSlug}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "GroupGroupSlugGet"
							r.operationID = ""
							r.pathPattern = "/Group/{groupSlug}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = "GroupGroupSlugPut"
							r.operationID = ""
							r.pathPattern = "/Group/{groupSlug}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/products"
						if l := len("/products"); len(elem) >= l && elem[0:l] == "/products" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								// Leaf: GroupGroupSlugProductsDelete
								r.name = "GroupGroupSlugProductsDelete"
								r.operationID = ""
								r.pathPattern = "/Group/{groupSlug}/products"
								r.args = args
								r.count = 1
								return r, true
							case "POST":
								// Leaf: GroupGroupSlugProductsPost
								r.name = "GroupGroupSlugProductsPost"
								r.operationID = ""
								r.pathPattern = "/Group/{groupSlug}/products"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'P': // Prefix: "Products"
				if l := len("Products"); len(elem) >= l && elem[0:l] == "Products" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ProductsGet"
						r.operationID = ""
						r.pathPattern = "/Products"
						r.args = args
						r.count = 0
						return r, true
					case "PUT":
						r.name = "ProductsPut"
						r.operationID = ""
						r.pathPattern = "/Products"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "p/"
						if l := len("p/"); len(elem) >= l && elem[0:l] == "p/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "productSlug"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ProductsPProductSlugGet
								r.name = "ProductsPProductSlugGet"
								r.operationID = ""
								r.pathPattern = "/Products/p/{productSlug}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					case 's': // Prefix: "service"
						if l := len("service"); len(elem) >= l && elem[0:l] == "service" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "serviceSlug"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "count"
									if l := len("count"); len(elem) >= l && elem[0:l] == "count" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ProductsServiceServiceSlugCountGet
											r.name = "ProductsServiceServiceSlugCountGet"
											r.operationID = ""
											r.pathPattern = "/Products/service/{serviceSlug}/count"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 'i': // Prefix: "ids"
									if l := len("ids"); len(elem) >= l && elem[0:l] == "ids" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ProductsServiceServiceSlugIdsGet
											r.name = "ProductsServiceServiceSlugIdsGet"
											r.operationID = ""
											r.pathPattern = "/Products/service/{serviceSlug}/ids"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ProductsServicesGet
									r.name = "ProductsServicesGet"
									r.operationID = ""
									r.pathPattern = "/Products/services"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					case 't': // Prefix: "topup"
						if l := len("topup"); len(elem) >= l && elem[0:l] == "topup" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ProductsTopupGet
								r.name = "ProductsTopupGet"
								r.operationID = ""
								r.pathPattern = "/Products/topup"
								r.args = args
								r.count = 0
								return r, true
							case "PUT":
								// Leaf: ProductsTopupPut
								r.name = "ProductsTopupPut"
								r.operationID = ""
								r.pathPattern = "/Products/topup"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'u': // Prefix: "user/"
						if l := len("user/"); len(elem) >= l && elem[0:l] == "user/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "userId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ProductsUserUserIdGet
								r.name = "ProductsUserUserIdGet"
								r.operationID = ""
								r.pathPattern = "/Products/user/{userId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'R': // Prefix: "Rules"
				if l := len("Rules"); len(elem) >= l && elem[0:l] == "Rules" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "RulesGet"
						r.operationID = ""
						r.pathPattern = "/Rules"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "RulesPost"
						r.operationID = ""
						r.pathPattern = "/Rules"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "ruleSlug"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: RulesRuleSlugDelete
							r.name = "RulesRuleSlugDelete"
							r.operationID = ""
							r.pathPattern = "/Rules/{ruleSlug}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							// Leaf: RulesRuleSlugGet
							r.name = "RulesRuleSlugGet"
							r.operationID = ""
							r.pathPattern = "/Rules/{ruleSlug}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			case 'T': // Prefix: "T"
				if l := len("T"); len(elem) >= l && elem[0:l] == "T" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'o': // Prefix: "opUp/"
					if l := len("opUp/"); len(elem) >= l && elem[0:l] == "opUp/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "c"
						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "ompensate"
							if l := len("ompensate"); len(elem) >= l && elem[0:l] == "ompensate" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: TopUpCompensatePost
									r.name = "TopUpCompensatePost"
									r.operationID = ""
									r.pathPattern = "/TopUp/compensate"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'u': // Prefix: "ustom"
							if l := len("ustom"); len(elem) >= l && elem[0:l] == "ustom" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: TopUpCustomPost
									r.name = "TopUpCustomPost"
									r.operationID = ""
									r.pathPattern = "/TopUp/custom"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					case 'o': // Prefix: "options"
						if l := len("options"); len(elem) >= l && elem[0:l] == "options" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: TopUpOptionsGet
								r.name = "TopUpOptionsGet"
								r.operationID = ""
								r.pathPattern = "/TopUp/options"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'p': // Prefix: "paypal"
						if l := len("paypal"); len(elem) >= l && elem[0:l] == "paypal" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: TopUpPaypalPost
								r.name = "TopUpPaypalPost"
								r.operationID = ""
								r.pathPattern = "/TopUp/paypal"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 's': // Prefix: "stripe"
						if l := len("stripe"); len(elem) >= l && elem[0:l] == "stripe" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: TopUpStripePost
								r.name = "TopUpStripePost"
								r.operationID = ""
								r.pathPattern = "/TopUp/stripe"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'r': // Prefix: "ransaction/"
					if l := len("ransaction/"); len(elem) >= l && elem[0:l] == "ransaction/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "planed/u/"
						if l := len("planed/u/"); len(elem) >= l && elem[0:l] == "planed/u/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "userId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "TransactionPlanedUUserIdGet"
								r.operationID = ""
								r.pathPattern = "/Transaction/planed/u/{userId}"
								r.args = args
								r.count = 1
								return r, true
							case "POST":
								r.name = "TransactionPlanedUUserIdPost"
								r.operationID = ""
								r.pathPattern = "/Transaction/planed/u/{userId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/t/"
							if l := len("/t/"); len(elem) >= l && elem[0:l] == "/t/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "transactionId"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									// Leaf: TransactionPlanedUUserIdTTransactionIdDelete
									r.name = "TransactionPlanedUUserIdTTransactionIdDelete"
									r.operationID = ""
									r.pathPattern = "/Transaction/planed/u/{userId}/t/{transactionId}"
									r.args = args
									r.count = 2
									return r, true
								case "PUT":
									// Leaf: TransactionPlanedUUserIdTTransactionIdPut
									r.name = "TransactionPlanedUUserIdTTransactionIdPut"
									r.operationID = ""
									r.pathPattern = "/Transaction/planed/u/{userId}/t/{transactionId}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
						}
					case 's': // Prefix: "send"
						if l := len("send"); len(elem) >= l && elem[0:l] == "send" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: TransactionSendPost
								r.name = "TransactionSendPost"
								r.operationID = ""
								r.pathPattern = "/Transaction/send"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'u': // Prefix: "u/"
						if l := len("u/"); len(elem) >= l && elem[0:l] == "u/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "userId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: TransactionUUserIdGet
								r.name = "TransactionUUserIdGet"
								r.operationID = ""
								r.pathPattern = "/Transaction/u/{userId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'U': // Prefix: "User/"
				if l := len("User/"); len(elem) >= l && elem[0:l] == "User/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "userId"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "UserUserIdGet"
						r.operationID = ""
						r.pathPattern = "/User/{userId}"
						r.args = args
						r.count = 1
						return r, true
					case "POST":
						r.name = "UserUserIdPost"
						r.operationID = ""
						r.pathPattern = "/User/{userId}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'o': // Prefix: "owns"
						if l := len("owns"); len(elem) >= l && elem[0:l] == "owns" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "UserUserIdOwnsPost"
								r.operationID = ""
								r.pathPattern = "/User/{userId}/owns"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "longest"
								if l := len("longest"); len(elem) >= l && elem[0:l] == "longest" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: UserUserIdOwnsLongestPost
										r.name = "UserUserIdOwnsLongestPost"
										r.operationID = ""
										r.pathPattern = "/User/{userId}/owns/longest"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'u': // Prefix: "until"
								if l := len("until"); len(elem) >= l && elem[0:l] == "until" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: UserUserIdOwnsUntilPost
										r.name = "UserUserIdOwnsUntilPost"
										r.operationID = ""
										r.pathPattern = "/User/{userId}/owns/until"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
							// Param: "productSlug"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/until"
								if l := len("/until"); len(elem) >= l && elem[0:l] == "/until" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: UserUserIdOwnsProductSlugUntilGet
										r.name = "UserUserIdOwnsProductSlugUntilGet"
										r.operationID = ""
										r.pathPattern = "/User/{userId}/owns/{productSlug}/until"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
							}
						}
					case 'p': // Prefix: "purchase/"
						if l := len("purchase/"); len(elem) >= l && elem[0:l] == "purchase/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "productSlug"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: UserUserIdPurchaseProductSlugPost
								r.name = "UserUserIdPurchaseProductSlugPost"
								r.operationID = ""
								r.pathPattern = "/User/{userId}/purchase/{productSlug}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}
					case 's': // Prefix: "service/purchase/"
						if l := len("service/purchase/"); len(elem) >= l && elem[0:l] == "service/purchase/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "productSlug"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: UserUserIdServicePurchaseProductSlugPost
								r.name = "UserUserIdServicePurchaseProductSlugPost"
								r.operationID = ""
								r.pathPattern = "/User/{userId}/service/purchase/{productSlug}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}
					case 't': // Prefix: "transfer"
						if l := len("transfer"); len(elem) >= l && elem[0:l] == "transfer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: UserUserIdTransferPost
								r.name = "UserUserIdTransferPost"
								r.operationID = ""
								r.pathPattern = "/User/{userId}/transfer"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
					// Param: "transactionId"
					// Leaf parameter
					args[1] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: UserUserIdTransactionIdDelete
							r.name = "UserUserIdTransactionIdDelete"
							r.operationID = ""
							r.pathPattern = "/User/{userId}/{transactionId}"
							r.args = args
							r.count = 2
							return r, true
						default:
							return
						}
					}
				}
			}
		}
	}
	return r, false
}
