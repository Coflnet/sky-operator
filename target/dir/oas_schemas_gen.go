// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
)

// ApplyPostOK is response for ApplyPost operation.
type ApplyPostOK struct{}

// CallbackPaypalPostOK is response for CallbackPaypalPost operation.
type CallbackPaypalPostOK struct{}

// CallbackStripePostOK is response for CallbackStripePost operation.
type CallbackStripePostOK struct{}

// Compensation for some kind of incident.
// Ref: #/components/schemas/Compensation
type Compensation struct {
	// The product id owners of which to compensate.
	ProductId OptNilString `json:"productId"`
	// A reason for the compensation, also serves as double compensation prevention.
	Reference OptNilString `json:"reference"`
	// How much to compensate.
	Amount OptInt32 `json:"amount"`
	// At what time ownership of Coflnet.Payments.Models.Product should be looked for (services might
	// expired since).
	When OptDateTime `json:"when"`
}

// GetProductId returns the value of ProductId.
func (s *Compensation) GetProductId() OptNilString {
	return s.ProductId
}

// GetReference returns the value of Reference.
func (s *Compensation) GetReference() OptNilString {
	return s.Reference
}

// GetAmount returns the value of Amount.
func (s *Compensation) GetAmount() OptInt32 {
	return s.Amount
}

// GetWhen returns the value of When.
func (s *Compensation) GetWhen() OptDateTime {
	return s.When
}

// SetProductId sets the value of ProductId.
func (s *Compensation) SetProductId(val OptNilString) {
	s.ProductId = val
}

// SetReference sets the value of Reference.
func (s *Compensation) SetReference(val OptNilString) {
	s.Reference = val
}

// SetAmount sets the value of Amount.
func (s *Compensation) SetAmount(val OptInt32) {
	s.Amount = val
}

// SetWhen sets the value of When.
func (s *Compensation) SetWhen(val OptDateTime) {
	s.When = val
}

// Represents a custom adjustment to an users balance.
// Ref: #/components/schemas/CustomTopUp
type CustomTopUp struct {
	// What product this coresponds to (the product can define additional information).
	ProductId OptNilString `json:"productId"`
	// How much to add/substract.
	Amount OptInt64 `json:"amount"`
	// Reference/Reason this topup took place, dupplicates will be rejected.
	Reference OptNilString `json:"reference"`
}

// GetProductId returns the value of ProductId.
func (s *CustomTopUp) GetProductId() OptNilString {
	return s.ProductId
}

// GetAmount returns the value of Amount.
func (s *CustomTopUp) GetAmount() OptInt64 {
	return s.Amount
}

// GetReference returns the value of Reference.
func (s *CustomTopUp) GetReference() OptNilString {
	return s.Reference
}

// SetProductId sets the value of ProductId.
func (s *CustomTopUp) SetProductId(val OptNilString) {
	s.ProductId = val
}

// SetAmount sets the value of Amount.
func (s *CustomTopUp) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetReference sets the value of Reference.
func (s *CustomTopUp) SetReference(val OptNilString) {
	s.Reference = val
}

// Ref: #/components/schemas/ExternalTransaction
type ExternalTransaction struct {
	ID        OptNilString `json:"id"`
	ProductId OptNilString `json:"productId"`
	Reference OptNilString `json:"reference"`
	Amount    OptFloat64   `json:"amount"`
	TimeStamp OptDateTime  `json:"timeStamp"`
}

// GetID returns the value of ID.
func (s *ExternalTransaction) GetID() OptNilString {
	return s.ID
}

// GetProductId returns the value of ProductId.
func (s *ExternalTransaction) GetProductId() OptNilString {
	return s.ProductId
}

// GetReference returns the value of Reference.
func (s *ExternalTransaction) GetReference() OptNilString {
	return s.Reference
}

// GetAmount returns the value of Amount.
func (s *ExternalTransaction) GetAmount() OptFloat64 {
	return s.Amount
}

// GetTimeStamp returns the value of TimeStamp.
func (s *ExternalTransaction) GetTimeStamp() OptDateTime {
	return s.TimeStamp
}

// SetID sets the value of ID.
func (s *ExternalTransaction) SetID(val OptNilString) {
	s.ID = val
}

// SetProductId sets the value of ProductId.
func (s *ExternalTransaction) SetProductId(val OptNilString) {
	s.ProductId = val
}

// SetReference sets the value of Reference.
func (s *ExternalTransaction) SetReference(val OptNilString) {
	s.Reference = val
}

// SetAmount sets the value of Amount.
func (s *ExternalTransaction) SetAmount(val OptFloat64) {
	s.Amount = val
}

// SetTimeStamp sets the value of TimeStamp.
func (s *ExternalTransaction) SetTimeStamp(val OptDateTime) {
	s.TimeStamp = val
}

// A group is a collection of one or more Coflnet.Payments.Models.Product.
// Ref: #/components/schemas/Group
type Group struct {
	// Primary Key.
	ID OptInt32 `json:"id"`
	// Identifier of this group.
	Slug OptNilString `json:"slug"`
	// Products in this group.
	Products OptNilProductArray `json:"products"`
}

// GetID returns the value of ID.
func (s *Group) GetID() OptInt32 {
	return s.ID
}

// GetSlug returns the value of Slug.
func (s *Group) GetSlug() OptNilString {
	return s.Slug
}

// GetProducts returns the value of Products.
func (s *Group) GetProducts() OptNilProductArray {
	return s.Products
}

// SetID sets the value of ID.
func (s *Group) SetID(val OptInt32) {
	s.ID = val
}

// SetSlug sets the value of Slug.
func (s *Group) SetSlug(val OptNilString) {
	s.Slug = val
}

// SetProducts sets the value of Products.
func (s *Group) SetProducts(val OptNilProductArray) {
	s.Products = val
}

// Ref: #/components/schemas/Int32Int32ValueTuple
type Int32Int32ValueTuple struct {
	Item1 OptInt32 `json:"item1"`
	Item2 OptInt32 `json:"item2"`
}

// GetItem1 returns the value of Item1.
func (s *Int32Int32ValueTuple) GetItem1() OptInt32 {
	return s.Item1
}

// GetItem2 returns the value of Item2.
func (s *Int32Int32ValueTuple) GetItem2() OptInt32 {
	return s.Item2
}

// SetItem1 sets the value of Item1.
func (s *Int32Int32ValueTuple) SetItem1(val OptInt32) {
	s.Item1 = val
}

// SetItem2 sets the value of Item2.
func (s *Int32Int32ValueTuple) SetItem2(val OptInt32) {
	s.Item2 = val
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroup returns new OptGroup with value set to v.
func NewOptGroup(v Group) OptGroup {
	return OptGroup{
		Value: v,
		Set:   true,
	}
}

// OptGroup is optional Group.
type OptGroup struct {
	Value Group
	Set   bool
}

// IsSet returns true if OptGroup was set.
func (o OptGroup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroup) Reset() {
	var v Group
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroup) SetTo(v Group) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroup) Get() (v Group, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroup) Or(d Group) Group {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilOwnerShipArray returns new OptNilOwnerShipArray with value set to v.
func NewOptNilOwnerShipArray(v []OwnerShip) OptNilOwnerShipArray {
	return OptNilOwnerShipArray{
		Value: v,
		Set:   true,
	}
}

// OptNilOwnerShipArray is optional nullable []OwnerShip.
type OptNilOwnerShipArray struct {
	Value []OwnerShip
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilOwnerShipArray was set.
func (o OptNilOwnerShipArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilOwnerShipArray) Reset() {
	var v []OwnerShip
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilOwnerShipArray) SetTo(v []OwnerShip) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilOwnerShipArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilOwnerShipArray) Get() (v []OwnerShip, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilOwnerShipArray) Or(d []OwnerShip) []OwnerShip {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilProductArray returns new OptNilProductArray with value set to v.
func NewOptNilProductArray(v []Product) OptNilProductArray {
	return OptNilProductArray{
		Value: v,
		Set:   true,
	}
}

// OptNilProductArray is optional nullable []Product.
type OptNilProductArray struct {
	Value []Product
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilProductArray was set.
func (o OptNilProductArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilProductArray) Reset() {
	var v []Product
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilProductArray) SetTo(v []Product) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilProductArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilProductArray) Get() (v []Product, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilProductArray) Or(d []Product) []Product {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPurchaseableProductArray returns new OptNilPurchaseableProductArray with value set to v.
func NewOptNilPurchaseableProductArray(v []PurchaseableProduct) OptNilPurchaseableProductArray {
	return OptNilPurchaseableProductArray{
		Value: v,
		Set:   true,
	}
}

// OptNilPurchaseableProductArray is optional nullable []PurchaseableProduct.
type OptNilPurchaseableProductArray struct {
	Value []PurchaseableProduct
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPurchaseableProductArray was set.
func (o OptNilPurchaseableProductArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPurchaseableProductArray) Reset() {
	var v []PurchaseableProduct
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPurchaseableProductArray) SetTo(v []PurchaseableProduct) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPurchaseableProductArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPurchaseableProductArray) Get() (v []PurchaseableProduct, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPurchaseableProductArray) Or(d []PurchaseableProduct) []PurchaseableProduct {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRuleArray returns new OptNilRuleArray with value set to v.
func NewOptNilRuleArray(v []Rule) OptNilRuleArray {
	return OptNilRuleArray{
		Value: v,
		Set:   true,
	}
}

// OptNilRuleArray is optional nullable []Rule.
type OptNilRuleArray struct {
	Value []Rule
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRuleArray was set.
func (o OptNilRuleArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRuleArray) Reset() {
	var v []Rule
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRuleArray) SetTo(v []Rule) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRuleArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRuleArray) Get() (v []Rule, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRuleArray) Or(d []Rule) []Rule {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRuleCreateArray returns new OptNilRuleCreateArray with value set to v.
func NewOptNilRuleCreateArray(v []RuleCreate) OptNilRuleCreateArray {
	return OptNilRuleCreateArray{
		Value: v,
		Set:   true,
	}
}

// OptNilRuleCreateArray is optional nullable []RuleCreate.
type OptNilRuleCreateArray struct {
	Value []RuleCreate
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRuleCreateArray was set.
func (o OptNilRuleCreateArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRuleCreateArray) Reset() {
	var v []RuleCreate
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRuleCreateArray) SetTo(v []RuleCreate) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRuleCreateArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRuleCreateArray) Get() (v []RuleCreate, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRuleCreateArray) Or(d []RuleCreate) []RuleCreate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSystemStateGroups returns new OptNilSystemStateGroups with value set to v.
func NewOptNilSystemStateGroups(v SystemStateGroups) OptNilSystemStateGroups {
	return OptNilSystemStateGroups{
		Value: v,
		Set:   true,
	}
}

// OptNilSystemStateGroups is optional nullable SystemStateGroups.
type OptNilSystemStateGroups struct {
	Value SystemStateGroups
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSystemStateGroups was set.
func (o OptNilSystemStateGroups) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSystemStateGroups) Reset() {
	var v SystemStateGroups
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSystemStateGroups) SetTo(v SystemStateGroups) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSystemStateGroups) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSystemStateGroups) Get() (v SystemStateGroups, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSystemStateGroups) Or(d SystemStateGroups) SystemStateGroups {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTopUpProductArray returns new OptNilTopUpProductArray with value set to v.
func NewOptNilTopUpProductArray(v []TopUpProduct) OptNilTopUpProductArray {
	return OptNilTopUpProductArray{
		Value: v,
		Set:   true,
	}
}

// OptNilTopUpProductArray is optional nullable []TopUpProduct.
type OptNilTopUpProductArray struct {
	Value []TopUpProduct
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTopUpProductArray was set.
func (o OptNilTopUpProductArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTopUpProductArray) Reset() {
	var v []TopUpProduct
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTopUpProductArray) SetTo(v []TopUpProduct) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTopUpProductArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTopUpProductArray) Get() (v []TopUpProduct, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTopUpProductArray) Or(d []TopUpProduct) []TopUpProduct {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProduct returns new OptProduct with value set to v.
func NewOptProduct(v Product) OptProduct {
	return OptProduct{
		Value: v,
		Set:   true,
	}
}

// OptProduct is optional Product.
type OptProduct struct {
	Value Product
	Set   bool
}

// IsSet returns true if OptProduct was set.
func (o OptProduct) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProduct) Reset() {
	var v Product
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProduct) SetTo(v Product) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProduct) Get() (v Product, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProduct) Or(d Product) Product {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProductType returns new OptProductType with value set to v.
func NewOptProductType(v ProductType) OptProductType {
	return OptProductType{
		Value: v,
		Set:   true,
	}
}

// OptProductType is optional ProductType.
type OptProductType struct {
	Value ProductType
	Set   bool
}

// IsSet returns true if OptProductType was set.
func (o OptProductType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProductType) Reset() {
	var v ProductType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProductType) SetTo(v ProductType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProductType) Get() (v ProductType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProductType) Or(d ProductType) ProductType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPurchaseableProduct returns new OptPurchaseableProduct with value set to v.
func NewOptPurchaseableProduct(v PurchaseableProduct) OptPurchaseableProduct {
	return OptPurchaseableProduct{
		Value: v,
		Set:   true,
	}
}

// OptPurchaseableProduct is optional PurchaseableProduct.
type OptPurchaseableProduct struct {
	Value PurchaseableProduct
	Set   bool
}

// IsSet returns true if OptPurchaseableProduct was set.
func (o OptPurchaseableProduct) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPurchaseableProduct) Reset() {
	var v PurchaseableProduct
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPurchaseableProduct) SetTo(v PurchaseableProduct) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPurchaseableProduct) Get() (v PurchaseableProduct, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPurchaseableProduct) Or(d PurchaseableProduct) PurchaseableProduct {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleFlags returns new OptRuleFlags with value set to v.
func NewOptRuleFlags(v RuleFlags) OptRuleFlags {
	return OptRuleFlags{
		Value: v,
		Set:   true,
	}
}

// OptRuleFlags is optional RuleFlags.
type OptRuleFlags struct {
	Value RuleFlags
	Set   bool
}

// IsSet returns true if OptRuleFlags was set.
func (o OptRuleFlags) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleFlags) Reset() {
	var v RuleFlags
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleFlags) SetTo(v RuleFlags) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleFlags) Get() (v RuleFlags, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleFlags) Or(d RuleFlags) RuleFlags {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Represents an ownership of some product by some user.
// Has the time of when the ownership expires.
// Ref: #/components/schemas/OwnerShip
type OwnerShip struct {
	// Primary Id.
	ID      OptInt64               `json:"id"`
	Product OptPurchaseableProduct `json:"product"`
	// How long.
	Expires OptDateTime `json:"expires"`
}

// GetID returns the value of ID.
func (s *OwnerShip) GetID() OptInt64 {
	return s.ID
}

// GetProduct returns the value of Product.
func (s *OwnerShip) GetProduct() OptPurchaseableProduct {
	return s.Product
}

// GetExpires returns the value of Expires.
func (s *OwnerShip) GetExpires() OptDateTime {
	return s.Expires
}

// SetID sets the value of ID.
func (s *OwnerShip) SetID(val OptInt64) {
	s.ID = val
}

// SetProduct sets the value of Product.
func (s *OwnerShip) SetProduct(val OptPurchaseableProduct) {
	s.Product = val
}

// SetExpires sets the value of Expires.
func (s *OwnerShip) SetExpires(val OptDateTime) {
	s.Expires = val
}

// A empheral transaction that can still be changed.
// Intended for invoices that may still be canceled or bidding.
// Ref: #/components/schemas/PlanedTransaction
type PlanedTransaction struct {
	// Primary Id.
	ID      OptInt64   `json:"id"`
	Product OptProduct `json:"product"`
	// The size of the transaction.
	Amount OptFloat64 `json:"amount"`
	// Custom reference data for this transaction.
	// External identifiers, notes, metadata.
	Reference OptNilString `json:"reference"`
	// Timestamp of this transaction.
	Timestamp OptDateTime `json:"timestamp"`
}

// GetID returns the value of ID.
func (s *PlanedTransaction) GetID() OptInt64 {
	return s.ID
}

// GetProduct returns the value of Product.
func (s *PlanedTransaction) GetProduct() OptProduct {
	return s.Product
}

// GetAmount returns the value of Amount.
func (s *PlanedTransaction) GetAmount() OptFloat64 {
	return s.Amount
}

// GetReference returns the value of Reference.
func (s *PlanedTransaction) GetReference() OptNilString {
	return s.Reference
}

// GetTimestamp returns the value of Timestamp.
func (s *PlanedTransaction) GetTimestamp() OptDateTime {
	return s.Timestamp
}

// SetID sets the value of ID.
func (s *PlanedTransaction) SetID(val OptInt64) {
	s.ID = val
}

// SetProduct sets the value of Product.
func (s *PlanedTransaction) SetProduct(val OptProduct) {
	s.Product = val
}

// SetAmount sets the value of Amount.
func (s *PlanedTransaction) SetAmount(val OptFloat64) {
	s.Amount = val
}

// SetReference sets the value of Reference.
func (s *PlanedTransaction) SetReference(val OptNilString) {
	s.Reference = val
}

// SetTimestamp sets the value of Timestamp.
func (s *PlanedTransaction) SetTimestamp(val OptDateTime) {
	s.Timestamp = val
}

// Base class for Products.
// Ref: #/components/schemas/Product
type Product struct {
	// Primary Key.
	ID OptInt32 `json:"id"`
	// Title of this product.
	Title OptNilString `json:"title"`
	// Unique Slug for this product.
	Slug OptNilString `json:"slug"`
	// DB-Level description may not be displayed to the end user directly (localisation n stuff).
	Description OptNilString `json:"description"`
	// The exact amount this product costs to purchase.
	Cost OptFloat64 `json:"cost"`
	// How long this product is owned by an user in seconds.
	OwnershipSeconds OptInt64       `json:"ownershipSeconds"`
	Type             OptProductType `json:"type"`
}

// GetID returns the value of ID.
func (s *Product) GetID() OptInt32 {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Product) GetTitle() OptNilString {
	return s.Title
}

// GetSlug returns the value of Slug.
func (s *Product) GetSlug() OptNilString {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *Product) GetDescription() OptNilString {
	return s.Description
}

// GetCost returns the value of Cost.
func (s *Product) GetCost() OptFloat64 {
	return s.Cost
}

// GetOwnershipSeconds returns the value of OwnershipSeconds.
func (s *Product) GetOwnershipSeconds() OptInt64 {
	return s.OwnershipSeconds
}

// GetType returns the value of Type.
func (s *Product) GetType() OptProductType {
	return s.Type
}

// SetID sets the value of ID.
func (s *Product) SetID(val OptInt32) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Product) SetTitle(val OptNilString) {
	s.Title = val
}

// SetSlug sets the value of Slug.
func (s *Product) SetSlug(val OptNilString) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *Product) SetDescription(val OptNilString) {
	s.Description = val
}

// SetCost sets the value of Cost.
func (s *Product) SetCost(val OptFloat64) {
	s.Cost = val
}

// SetOwnershipSeconds sets the value of OwnershipSeconds.
func (s *Product) SetOwnershipSeconds(val OptInt64) {
	s.OwnershipSeconds = val
}

// SetType sets the value of Type.
func (s *Product) SetType(val OptProductType) {
	s.Type = val
}

// Types of products.
// Ref: #/components/schemas/ProductType
type ProductType string

const (
	ProductTypeNONE          ProductType = "NONE"
	ProductTypeSERVICE       ProductType = "SERVICE"
	ProductTypeCOLLECTABLE   ProductType = "COLLECTABLE"
	ProductTypeTOPUP         ProductType = "TOP_UP"
	ProductTypeLOCKED        ProductType = "LOCKED"
	ProductTypeDISABLED      ProductType = "DISABLED"
	ProductTypeVARIABLEPRICE ProductType = "VARIABLE_PRICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProductType) MarshalText() ([]byte, error) {
	switch s {
	case ProductTypeNONE:
		return []byte(s), nil
	case ProductTypeSERVICE:
		return []byte(s), nil
	case ProductTypeCOLLECTABLE:
		return []byte(s), nil
	case ProductTypeTOPUP:
		return []byte(s), nil
	case ProductTypeLOCKED:
		return []byte(s), nil
	case ProductTypeDISABLED:
		return []byte(s), nil
	case ProductTypeVARIABLEPRICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProductType) UnmarshalText(data []byte) error {
	switch ProductType(data) {
	case ProductTypeNONE:
		*s = ProductTypeNONE
		return nil
	case ProductTypeSERVICE:
		*s = ProductTypeSERVICE
		return nil
	case ProductTypeCOLLECTABLE:
		*s = ProductTypeCOLLECTABLE
		return nil
	case ProductTypeTOPUP:
		*s = ProductTypeTOPUP
		return nil
	case ProductTypeLOCKED:
		*s = ProductTypeLOCKED
		return nil
	case ProductTypeDISABLED:
		*s = ProductTypeDISABLED
		return nil
	case ProductTypeVARIABLEPRICE:
		*s = ProductTypeVARIABLEPRICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Products that can be purchased.
// Ref: #/components/schemas/PurchaseableProduct
type PurchaseableProduct struct {
	// Primary Key.
	ID OptInt32 `json:"id"`
	// Title of this product.
	Title OptNilString `json:"title"`
	// Unique Slug for this product.
	Slug OptNilString `json:"slug"`
	// DB-Level description may not be displayed to the end user directly (localisation n stuff).
	Description OptNilString `json:"description"`
	// The exact amount this product costs to purchase.
	Cost OptFloat64 `json:"cost"`
	// How long this product is owned by an user in seconds.
	OwnershipSeconds OptInt64       `json:"ownershipSeconds"`
	Type             OptProductType `json:"type"`
}

// GetID returns the value of ID.
func (s *PurchaseableProduct) GetID() OptInt32 {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *PurchaseableProduct) GetTitle() OptNilString {
	return s.Title
}

// GetSlug returns the value of Slug.
func (s *PurchaseableProduct) GetSlug() OptNilString {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *PurchaseableProduct) GetDescription() OptNilString {
	return s.Description
}

// GetCost returns the value of Cost.
func (s *PurchaseableProduct) GetCost() OptFloat64 {
	return s.Cost
}

// GetOwnershipSeconds returns the value of OwnershipSeconds.
func (s *PurchaseableProduct) GetOwnershipSeconds() OptInt64 {
	return s.OwnershipSeconds
}

// GetType returns the value of Type.
func (s *PurchaseableProduct) GetType() OptProductType {
	return s.Type
}

// SetID sets the value of ID.
func (s *PurchaseableProduct) SetID(val OptInt32) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *PurchaseableProduct) SetTitle(val OptNilString) {
	s.Title = val
}

// SetSlug sets the value of Slug.
func (s *PurchaseableProduct) SetSlug(val OptNilString) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *PurchaseableProduct) SetDescription(val OptNilString) {
	s.Description = val
}

// SetCost sets the value of Cost.
func (s *PurchaseableProduct) SetCost(val OptFloat64) {
	s.Cost = val
}

// SetOwnershipSeconds sets the value of OwnershipSeconds.
func (s *PurchaseableProduct) SetOwnershipSeconds(val OptInt64) {
	s.OwnershipSeconds = val
}

// SetType sets the value of Type.
func (s *PurchaseableProduct) SetType(val OptProductType) {
	s.Type = val
}

// Rules can change attributes of products based on the ownership of another.
// Ref: #/components/schemas/Rule
type Rule struct {
	// Primary key of this rule.
	ID OptInt32 `json:"id"`
	// Identifier of this rule.
	Slug OptNilString `json:"slug"`
	// In what order to apply the rules.
	Priority OptInt32     `json:"priority"`
	Requires OptGroup     `json:"requires"`
	Targets  OptGroup     `json:"targets"`
	Flags    OptRuleFlags `json:"flags"`
	// Amount this rule changes the target property.
	Amount OptFloat64 `json:"amount"`
}

// GetID returns the value of ID.
func (s *Rule) GetID() OptInt32 {
	return s.ID
}

// GetSlug returns the value of Slug.
func (s *Rule) GetSlug() OptNilString {
	return s.Slug
}

// GetPriority returns the value of Priority.
func (s *Rule) GetPriority() OptInt32 {
	return s.Priority
}

// GetRequires returns the value of Requires.
func (s *Rule) GetRequires() OptGroup {
	return s.Requires
}

// GetTargets returns the value of Targets.
func (s *Rule) GetTargets() OptGroup {
	return s.Targets
}

// GetFlags returns the value of Flags.
func (s *Rule) GetFlags() OptRuleFlags {
	return s.Flags
}

// GetAmount returns the value of Amount.
func (s *Rule) GetAmount() OptFloat64 {
	return s.Amount
}

// SetID sets the value of ID.
func (s *Rule) SetID(val OptInt32) {
	s.ID = val
}

// SetSlug sets the value of Slug.
func (s *Rule) SetSlug(val OptNilString) {
	s.Slug = val
}

// SetPriority sets the value of Priority.
func (s *Rule) SetPriority(val OptInt32) {
	s.Priority = val
}

// SetRequires sets the value of Requires.
func (s *Rule) SetRequires(val OptGroup) {
	s.Requires = val
}

// SetTargets sets the value of Targets.
func (s *Rule) SetTargets(val OptGroup) {
	s.Targets = val
}

// SetFlags sets the value of Flags.
func (s *Rule) SetFlags(val OptRuleFlags) {
	s.Flags = val
}

// SetAmount sets the value of Amount.
func (s *Rule) SetAmount(val OptFloat64) {
	s.Amount = val
}

// Arguments for creating a new rule.
// Ref: #/components/schemas/RuleCreate
type RuleCreate struct {
	// Identifier of this rule.
	Slug OptNilString `json:"slug"`
	// In what order to apply the rules (highest first).
	Priority OptInt32 `json:"priority"`
	// This rule only applies if the user owns a product contained in this group
	// if null, the rule always applies to the target group (except overriden by another rule).
	RequiresGroup OptNilString `json:"requiresGroup"`
	// This rule applies to all products in this group.
	TargetsGroup OptNilString `json:"targetsGroup"`
	Flags        OptRuleFlags `json:"flags"`
	// Amount this rule changes the target property.
	Amount OptFloat64 `json:"amount"`
}

// GetSlug returns the value of Slug.
func (s *RuleCreate) GetSlug() OptNilString {
	return s.Slug
}

// GetPriority returns the value of Priority.
func (s *RuleCreate) GetPriority() OptInt32 {
	return s.Priority
}

// GetRequiresGroup returns the value of RequiresGroup.
func (s *RuleCreate) GetRequiresGroup() OptNilString {
	return s.RequiresGroup
}

// GetTargetsGroup returns the value of TargetsGroup.
func (s *RuleCreate) GetTargetsGroup() OptNilString {
	return s.TargetsGroup
}

// GetFlags returns the value of Flags.
func (s *RuleCreate) GetFlags() OptRuleFlags {
	return s.Flags
}

// GetAmount returns the value of Amount.
func (s *RuleCreate) GetAmount() OptFloat64 {
	return s.Amount
}

// SetSlug sets the value of Slug.
func (s *RuleCreate) SetSlug(val OptNilString) {
	s.Slug = val
}

// SetPriority sets the value of Priority.
func (s *RuleCreate) SetPriority(val OptInt32) {
	s.Priority = val
}

// SetRequiresGroup sets the value of RequiresGroup.
func (s *RuleCreate) SetRequiresGroup(val OptNilString) {
	s.RequiresGroup = val
}

// SetTargetsGroup sets the value of TargetsGroup.
func (s *RuleCreate) SetTargetsGroup(val OptNilString) {
	s.TargetsGroup = val
}

// SetFlags sets the value of Flags.
func (s *RuleCreate) SetFlags(val OptRuleFlags) {
	s.Flags = val
}

// SetAmount sets the value of Amount.
func (s *RuleCreate) SetAmount(val OptFloat64) {
	s.Amount = val
}

// Flags modifying a Coflnet.Payments.Models.Rule.
// Ref: #/components/schemas/RuleFlags
type RuleFlags string

const (
	RuleFlagsNONE          RuleFlags = "NONE"
	RuleFlagsINVERT        RuleFlags = "INVERT"
	RuleFlagsPERCENT       RuleFlags = "PERCENT"
	RuleFlagsLONGER        RuleFlags = "LONGER"
	RuleFlagsDISCOUNT      RuleFlags = "DISCOUNT"
	RuleFlagsEARLYBREAK    RuleFlags = "EARLY_BREAK"
	RuleFlagsBLOCKPURCHASE RuleFlags = "BLOCK_PURCHASE"
)

// MarshalText implements encoding.TextMarshaler.
func (s RuleFlags) MarshalText() ([]byte, error) {
	switch s {
	case RuleFlagsNONE:
		return []byte(s), nil
	case RuleFlagsINVERT:
		return []byte(s), nil
	case RuleFlagsPERCENT:
		return []byte(s), nil
	case RuleFlagsLONGER:
		return []byte(s), nil
	case RuleFlagsDISCOUNT:
		return []byte(s), nil
	case RuleFlagsEARLYBREAK:
		return []byte(s), nil
	case RuleFlagsBLOCKPURCHASE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RuleFlags) UnmarshalText(data []byte) error {
	switch RuleFlags(data) {
	case RuleFlagsNONE:
		*s = RuleFlagsNONE
		return nil
	case RuleFlagsINVERT:
		*s = RuleFlagsINVERT
		return nil
	case RuleFlagsPERCENT:
		*s = RuleFlagsPERCENT
		return nil
	case RuleFlagsLONGER:
		*s = RuleFlagsLONGER
		return nil
	case RuleFlagsDISCOUNT:
		*s = RuleFlagsDISCOUNT
		return nil
	case RuleFlagsEARLYBREAK:
		*s = RuleFlagsEARLYBREAK
		return nil
	case RuleFlagsBLOCKPURCHASE:
		*s = RuleFlagsBLOCKPURCHASE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RuleResult
type RuleResult struct {
	ModifiedProduct OptProduct      `json:"modifiedProduct"`
	Rules           OptNilRuleArray `json:"rules"`
}

// GetModifiedProduct returns the value of ModifiedProduct.
func (s *RuleResult) GetModifiedProduct() OptProduct {
	return s.ModifiedProduct
}

// GetRules returns the value of Rules.
func (s *RuleResult) GetRules() OptNilRuleArray {
	return s.Rules
}

// SetModifiedProduct sets the value of ModifiedProduct.
func (s *RuleResult) SetModifiedProduct(val OptProduct) {
	s.ModifiedProduct = val
}

// SetRules sets the value of Rules.
func (s *RuleResult) SetRules(val OptNilRuleArray) {
	s.Rules = val
}

// State to get the db into
// Useful for gitops.
// Ref: #/components/schemas/SystemState
type SystemState struct {
	// Available products.
	Products OptNilPurchaseableProductArray `json:"products"`
	// Topups that are currently active.
	TopUps OptNilTopUpProductArray `json:"topUps"`
	// What products go into which groups.
	Groups OptNilSystemStateGroups `json:"groups"`
	// Rules.
	Rules OptNilRuleCreateArray `json:"rules"`
}

// GetProducts returns the value of Products.
func (s *SystemState) GetProducts() OptNilPurchaseableProductArray {
	return s.Products
}

// GetTopUps returns the value of TopUps.
func (s *SystemState) GetTopUps() OptNilTopUpProductArray {
	return s.TopUps
}

// GetGroups returns the value of Groups.
func (s *SystemState) GetGroups() OptNilSystemStateGroups {
	return s.Groups
}

// GetRules returns the value of Rules.
func (s *SystemState) GetRules() OptNilRuleCreateArray {
	return s.Rules
}

// SetProducts sets the value of Products.
func (s *SystemState) SetProducts(val OptNilPurchaseableProductArray) {
	s.Products = val
}

// SetTopUps sets the value of TopUps.
func (s *SystemState) SetTopUps(val OptNilTopUpProductArray) {
	s.TopUps = val
}

// SetGroups sets the value of Groups.
func (s *SystemState) SetGroups(val OptNilSystemStateGroups) {
	s.Groups = val
}

// SetRules sets the value of Rules.
func (s *SystemState) SetRules(val OptNilRuleCreateArray) {
	s.Rules = val
}

// What products go into which groups.
type SystemStateGroups map[string][]string

func (s *SystemStateGroups) init() SystemStateGroups {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}

// Response containing an id.
// Ref: #/components/schemas/TopUpIdResponse
type TopUpIdResponse struct {
	// Checkout id.
	ID OptNilString `json:"id"`
	// Directlink to redirect the user to.
	DirctLink OptNilString `json:"dirctLink"`
}

// GetID returns the value of ID.
func (s *TopUpIdResponse) GetID() OptNilString {
	return s.ID
}

// GetDirctLink returns the value of DirctLink.
func (s *TopUpIdResponse) GetDirctLink() OptNilString {
	return s.DirctLink
}

// SetID sets the value of ID.
func (s *TopUpIdResponse) SetID(val OptNilString) {
	s.ID = val
}

// SetDirctLink sets the value of DirctLink.
func (s *TopUpIdResponse) SetDirctLink(val OptNilString) {
	s.DirctLink = val
}

// Ref: #/components/schemas/TopUpOptions
type TopUpOptions struct {
	// Overwrite the default redirect url after successful payment.
	SuccessUrl OptNilString `json:"successUrl"`
	// Overwrite the default redirect url for anything else but payment.
	CancelUrl OptNilString `json:"cancelUrl"`
	// If provided, this value will be used when the Customer object is created. If not provided,
	// customers will be asked to enter their email address.
	UserEmail OptNilString `json:"userEmail"`
	// Percise amount of coflcoins to topup.
	TopUpAmount OptInt64 `json:"topUpAmount"`
}

// GetSuccessUrl returns the value of SuccessUrl.
func (s *TopUpOptions) GetSuccessUrl() OptNilString {
	return s.SuccessUrl
}

// GetCancelUrl returns the value of CancelUrl.
func (s *TopUpOptions) GetCancelUrl() OptNilString {
	return s.CancelUrl
}

// GetUserEmail returns the value of UserEmail.
func (s *TopUpOptions) GetUserEmail() OptNilString {
	return s.UserEmail
}

// GetTopUpAmount returns the value of TopUpAmount.
func (s *TopUpOptions) GetTopUpAmount() OptInt64 {
	return s.TopUpAmount
}

// SetSuccessUrl sets the value of SuccessUrl.
func (s *TopUpOptions) SetSuccessUrl(val OptNilString) {
	s.SuccessUrl = val
}

// SetCancelUrl sets the value of CancelUrl.
func (s *TopUpOptions) SetCancelUrl(val OptNilString) {
	s.CancelUrl = val
}

// SetUserEmail sets the value of UserEmail.
func (s *TopUpOptions) SetUserEmail(val OptNilString) {
	s.UserEmail = val
}

// SetTopUpAmount sets the value of TopUpAmount.
func (s *TopUpOptions) SetTopUpAmount(val OptInt64) {
	s.TopUpAmount = val
}

// Ref: #/components/schemas/TopUpProduct
type TopUpProduct struct {
	// The price of this Coflnet.Payments.Models.TopUpProduct in Coflnet.Payments.Models.TopUpProduct.
	// CurrencyCode.
	Price OptFloat64 `json:"price"`
	// The currency code.
	CurrencyCode OptNilString `json:"currencyCode"`
	// What provider this top up is valid for
	// (differnt fees can require different prices).
	ProviderSlug OptNilString `json:"providerSlug"`
	// Primary Key.
	ID OptInt32 `json:"id"`
	// Title of this product.
	Title OptNilString `json:"title"`
	// Unique Slug for this product.
	Slug OptNilString `json:"slug"`
	// DB-Level description may not be displayed to the end user directly (localisation n stuff).
	Description OptNilString `json:"description"`
	// The exact amount this product costs to purchase.
	Cost OptFloat64 `json:"cost"`
	// How long this product is owned by an user in seconds.
	OwnershipSeconds OptInt64       `json:"ownershipSeconds"`
	Type             OptProductType `json:"type"`
}

// GetPrice returns the value of Price.
func (s *TopUpProduct) GetPrice() OptFloat64 {
	return s.Price
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *TopUpProduct) GetCurrencyCode() OptNilString {
	return s.CurrencyCode
}

// GetProviderSlug returns the value of ProviderSlug.
func (s *TopUpProduct) GetProviderSlug() OptNilString {
	return s.ProviderSlug
}

// GetID returns the value of ID.
func (s *TopUpProduct) GetID() OptInt32 {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *TopUpProduct) GetTitle() OptNilString {
	return s.Title
}

// GetSlug returns the value of Slug.
func (s *TopUpProduct) GetSlug() OptNilString {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *TopUpProduct) GetDescription() OptNilString {
	return s.Description
}

// GetCost returns the value of Cost.
func (s *TopUpProduct) GetCost() OptFloat64 {
	return s.Cost
}

// GetOwnershipSeconds returns the value of OwnershipSeconds.
func (s *TopUpProduct) GetOwnershipSeconds() OptInt64 {
	return s.OwnershipSeconds
}

// GetType returns the value of Type.
func (s *TopUpProduct) GetType() OptProductType {
	return s.Type
}

// SetPrice sets the value of Price.
func (s *TopUpProduct) SetPrice(val OptFloat64) {
	s.Price = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *TopUpProduct) SetCurrencyCode(val OptNilString) {
	s.CurrencyCode = val
}

// SetProviderSlug sets the value of ProviderSlug.
func (s *TopUpProduct) SetProviderSlug(val OptNilString) {
	s.ProviderSlug = val
}

// SetID sets the value of ID.
func (s *TopUpProduct) SetID(val OptInt32) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *TopUpProduct) SetTitle(val OptNilString) {
	s.Title = val
}

// SetSlug sets the value of Slug.
func (s *TopUpProduct) SetSlug(val OptNilString) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *TopUpProduct) SetDescription(val OptNilString) {
	s.Description = val
}

// SetCost sets the value of Cost.
func (s *TopUpProduct) SetCost(val OptFloat64) {
	s.Cost = val
}

// SetOwnershipSeconds sets the value of OwnershipSeconds.
func (s *TopUpProduct) SetOwnershipSeconds(val OptInt64) {
	s.OwnershipSeconds = val
}

// SetType sets the value of Type.
func (s *TopUpProduct) SetType(val OptProductType) {
	s.Type = val
}

// Event produced when a transaction occurs.
// Ref: #/components/schemas/TransactionEvent
type TransactionEvent struct {
	// The internal id of the transaction.
	ID OptInt64 `json:"id"`
	// Id of the user triggering the transaction.
	UserId OptNilString `json:"userId"`
	// Slug of the product.
	ProductSlug OptNilString `json:"productSlug"`
	// Unique id of this product settings.
	ProductId OptInt32 `json:"productId"`
	// How long this product will last till it expires.
	OwnedSeconds OptInt64       `json:"ownedSeconds"`
	ProductType  OptProductType `json:"productType"`
	// The transaction amount.
	Amount OptFloat64 `json:"amount"`
	// Optional reference.
	Reference OptNilString `json:"reference"`
	// When this transaction occured.
	Timestamp OptDateTime `json:"timestamp"`
}

// GetID returns the value of ID.
func (s *TransactionEvent) GetID() OptInt64 {
	return s.ID
}

// GetUserId returns the value of UserId.
func (s *TransactionEvent) GetUserId() OptNilString {
	return s.UserId
}

// GetProductSlug returns the value of ProductSlug.
func (s *TransactionEvent) GetProductSlug() OptNilString {
	return s.ProductSlug
}

// GetProductId returns the value of ProductId.
func (s *TransactionEvent) GetProductId() OptInt32 {
	return s.ProductId
}

// GetOwnedSeconds returns the value of OwnedSeconds.
func (s *TransactionEvent) GetOwnedSeconds() OptInt64 {
	return s.OwnedSeconds
}

// GetProductType returns the value of ProductType.
func (s *TransactionEvent) GetProductType() OptProductType {
	return s.ProductType
}

// GetAmount returns the value of Amount.
func (s *TransactionEvent) GetAmount() OptFloat64 {
	return s.Amount
}

// GetReference returns the value of Reference.
func (s *TransactionEvent) GetReference() OptNilString {
	return s.Reference
}

// GetTimestamp returns the value of Timestamp.
func (s *TransactionEvent) GetTimestamp() OptDateTime {
	return s.Timestamp
}

// SetID sets the value of ID.
func (s *TransactionEvent) SetID(val OptInt64) {
	s.ID = val
}

// SetUserId sets the value of UserId.
func (s *TransactionEvent) SetUserId(val OptNilString) {
	s.UserId = val
}

// SetProductSlug sets the value of ProductSlug.
func (s *TransactionEvent) SetProductSlug(val OptNilString) {
	s.ProductSlug = val
}

// SetProductId sets the value of ProductId.
func (s *TransactionEvent) SetProductId(val OptInt32) {
	s.ProductId = val
}

// SetOwnedSeconds sets the value of OwnedSeconds.
func (s *TransactionEvent) SetOwnedSeconds(val OptInt64) {
	s.OwnedSeconds = val
}

// SetProductType sets the value of ProductType.
func (s *TransactionEvent) SetProductType(val OptProductType) {
	s.ProductType = val
}

// SetAmount sets the value of Amount.
func (s *TransactionEvent) SetAmount(val OptFloat64) {
	s.Amount = val
}

// SetReference sets the value of Reference.
func (s *TransactionEvent) SetReference(val OptNilString) {
	s.Reference = val
}

// SetTimestamp sets the value of Timestamp.
func (s *TransactionEvent) SetTimestamp(val OptDateTime) {
	s.Timestamp = val
}

// TransactionSendPostOK is response for TransactionSendPost operation.
type TransactionSendPostOK struct{}

// Transfer request to another user.
// Ref: #/components/schemas/TransferRequest
type TransferRequest struct {
	// The identifier of the user which should receive the funds.
	TargetUser OptNilString `json:"targetUser"`
	// A unique reference to prevent double transfers.
	Reference OptNilString `json:"reference"`
	// The amount to transfer.
	Amount OptFloat64 `json:"amount"`
}

// GetTargetUser returns the value of TargetUser.
func (s *TransferRequest) GetTargetUser() OptNilString {
	return s.TargetUser
}

// GetReference returns the value of Reference.
func (s *TransferRequest) GetReference() OptNilString {
	return s.Reference
}

// GetAmount returns the value of Amount.
func (s *TransferRequest) GetAmount() OptFloat64 {
	return s.Amount
}

// SetTargetUser sets the value of TargetUser.
func (s *TransferRequest) SetTargetUser(val OptNilString) {
	s.TargetUser = val
}

// SetReference sets the value of Reference.
func (s *TransferRequest) SetReference(val OptNilString) {
	s.Reference = val
}

// SetAmount sets the value of Amount.
func (s *TransferRequest) SetAmount(val OptFloat64) {
	s.Amount = val
}

// An user capable of making transactions.
// Ref: #/components/schemas/User
type User struct {
	// Primary key.
	ID OptInt32 `json:"id"`
	// The identifier of the account system.
	ExternalId OptNilString `json:"externalId"`
	// Balance of this user.
	Balance OptFloat64 `json:"balance"`
	// The balance available (Coflnet.Payments.Models.User.Balance minus any Coflnet.Payments.Models.
	// PlanedTransaction).
	AvailableBalance OptFloat64 `json:"availableBalance"`
	// Things this user owns.
	Owns OptNilOwnerShipArray `json:"owns"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptInt32 {
	return s.ID
}

// GetExternalId returns the value of ExternalId.
func (s *User) GetExternalId() OptNilString {
	return s.ExternalId
}

// GetBalance returns the value of Balance.
func (s *User) GetBalance() OptFloat64 {
	return s.Balance
}

// GetAvailableBalance returns the value of AvailableBalance.
func (s *User) GetAvailableBalance() OptFloat64 {
	return s.AvailableBalance
}

// GetOwns returns the value of Owns.
func (s *User) GetOwns() OptNilOwnerShipArray {
	return s.Owns
}

// SetID sets the value of ID.
func (s *User) SetID(val OptInt32) {
	s.ID = val
}

// SetExternalId sets the value of ExternalId.
func (s *User) SetExternalId(val OptNilString) {
	s.ExternalId = val
}

// SetBalance sets the value of Balance.
func (s *User) SetBalance(val OptFloat64) {
	s.Balance = val
}

// SetAvailableBalance sets the value of AvailableBalance.
func (s *User) SetAvailableBalance(val OptFloat64) {
	s.AvailableBalance = val
}

// SetOwns sets the value of Owns.
func (s *User) SetOwns(val OptNilOwnerShipArray) {
	s.Owns = val
}

type UserUserIdOwnsUntilPostOKApplicationJSON map[string]time.Time

func (s *UserUserIdOwnsUntilPostOKApplicationJSON) init() UserUserIdOwnsUntilPostOKApplicationJSON {
	m := *s
	if m == nil {
		m = map[string]time.Time{}
		*s = m
	}
	return m
}
